#!/usr/bin/env python3
"""
Test script for markdown-converter server.
Takes a URL as argument, calls convert-by-url endpoint, and saves markdown to file.

Usage:
    python test_url_converter.py <url> [output_file.md]

Example:
    python test_url_converter.py https://example.com/article
    python test_url_converter.py https://example.com/article my_article.md
"""

import sys
import requests
import json
import os
from urllib.parse import urlparse
import re


def sanitize_filename(url):
    """Create a safe filename from URL"""
    parsed = urlparse(url)
    # Use domain and path to create filename
    filename = f"{parsed.netloc}{parsed.path}"
    # Replace invalid characters with underscores
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # Remove multiple underscores and trailing dots/spaces
    filename = re.sub(r'_+', '_', filename).strip('._')
    # Ensure it's not empty
    if not filename:
        filename = "converted_content"
    return f"{filename}.md"


def convert_url_to_markdown(url, server_url="http://127.0.0.1:5000", output_file=None):
    """Convert URL to markdown using the local server"""
    
    # Prepare the request payload
    payload = {
        "url": url,
        "detect_article": True  # Enable article detection for better content extraction
    }
    
    try:
        print(f"Converting URL: {url}")
        print(f"Calling server at: {server_url}/convert-by-url")
        
        # Make the API call
        response = requests.post(
            f"{server_url}/convert-by-url",
            json=payload,
            headers={"Content-Type": "application/json"},
            timeout=60  # 60 second timeout
        )
        
        # Check if request was successful
        response.raise_for_status()
        
        # Parse the JSON response
        result = response.json()
        
        if not result.get('success', False):
            print(f"Error from server: {result.get('error', 'Unknown error')}")
            return False
            
        markdown_content = result.get('markdown', '')
        source_url = result.get('source_url', url)
        
        # Determine output filename
        if not output_file:
            output_file = sanitize_filename(url)
        
        # Ensure .md extension
        if not output_file.endswith('.md'):
            output_file += '.md'
            
        # Add metadata header to markdown
        metadata_header = f"""<!-- 
Source URL: {source_url}
Converted on: {requests.utils.default_headers()['User-Agent']}
Generated by: markdown-converter test script
-->

# {source_url}

"""
        
        full_content = metadata_header + markdown_content
        
        # Write to file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(full_content)
            
        print(f"‚úÖ Successfully converted and saved to: {output_file}")
        print(f"üìÑ Content length: {len(markdown_content)} characters")
        print(f"üîó Source URL: {source_url}")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Error: Could not connect to the server.")
        print("   Make sure the server is running at http://127.0.0.1:5000")
        print("   Run: python server.py")
        return False
        
    except requests.exceptions.Timeout:
        print("‚ùå Error: Request timed out. The conversion took too long.")
        return False
        
    except requests.exceptions.HTTPError as e:
        print(f"‚ùå HTTP Error: {e}")
        try:
            error_data = response.json()
            print(f"   Server error: {error_data.get('error', 'Unknown error')}")
        except:
            print(f"   Response: {response.text}")
        return False
        
    except json.JSONDecodeError:
        print("‚ùå Error: Invalid JSON response from server")
        print(f"   Response: {response.text}")
        return False
        
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False


def main():
    """Main function to handle command line arguments"""
    if len(sys.argv) < 2:
        print("Usage: python test_url_converter.py <url> [output_file.md]")
        print("")
        print("Examples:")
        print("  python test_url_converter.py https://example.com/article")
        print("  python test_url_converter.py https://example.com/article my_article.md")
        sys.exit(1)
    
    url = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else None
    
    # Validate URL format
    if not url.startswith(('http://', 'https://')):
        print("‚ùå Error: URL must start with http:// or https://")
        sys.exit(1)
    
    # Test server connectivity first
    try:
        health_response = requests.get("http://127.0.0.1:5000/health", timeout=5)
        if health_response.status_code != 200:
            print("‚ö†Ô∏è  Warning: Server health check failed")
    except:
        print("‚ö†Ô∏è  Warning: Could not reach server health endpoint")
    
    # Convert the URL
    success = convert_url_to_markdown(url, output_file=output_file)
    
    if success:
        print("\nüéâ Conversion completed successfully!")
        sys.exit(0)
    else:
        print("\nüí• Conversion failed!")
        sys.exit(1)


if __name__ == "__main__":
    main()